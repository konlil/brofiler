#pragma once
#include "Common.h"
#include "Serialization.h"
#include "Singleton.h"

namespace Brofiler
{
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct EventDescription;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class EventDescriptionBoard
{
	std::vector<EventDescription*> board;
	EventDescriptionBoard() {}

	friend struct Singleton<EventDescriptionBoard>;
public:
	EventDescription* CreateDescription();

	static EventDescriptionBoard& Get();

	const std::vector<EventDescription*>& GetEvents() const;

	~EventDescriptionBoard();

	friend OutputDataStream& operator << ( OutputDataStream& stream, const EventDescriptionBoard& ob);
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
OutputDataStream& operator << ( OutputDataStream& stream, const EventDescriptionBoard& ob);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}


